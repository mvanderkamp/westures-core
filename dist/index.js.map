{"mappings":"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","sources":["index.js","src/Gesture.js","src/Input.js","src/PointerData.js","src/Point2D.js","src/constants.js","src/utils.js","src/Region.js","src/State.js","src/Smoothable.js"],"sourcesContent":["/**\n * The global API interface for westures-core. Exposes all classes, constants,\n * and routines used by the package. Use responsibly.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Input = require('./src/Input.js');\nconst Point2D = require('./src/Point2D.js');\nconst PointerData = require('./src/PointerData.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\nconst State = require('./src/State.js');\nconst constants = require('./src/constants.js');\nconst utils = require('./src/utils.js');\n\nmodule.exports = {\n  Gesture,\n  Input,\n  Point2D,\n  PointerData,\n  Region,\n  Smoothable,\n  State,\n  ...constants,\n  ...utils,\n};\n\n","'use strict';\n\nlet g_id = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.STATE_KEYS[]} [options.enableKeys=[]] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.STATE_KEYS[]} [options.disableKeys=[]] - List of keys\n * which will disable the gesture. The gesture will not be recognized if one of\n * these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the disable key is never down.\n * @param {number} [options.minInputs=1] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs=Number.MAX_VALUE] - The maximum number of\n * pointers that may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options. Can usually be adjusted live, though be careful doing this.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {westures-core.State} state - The input state object of the current\n   * region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced\n   * by calling [recognize]{@link westures-core.Gesture#recognize}.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.recognize(hook, state, data);\n    }\n  }\n\n  /**\n   * Recognize a Gesture by calling the handler. Standardizes the way the\n   * handler is called so that classes extending Gesture can circumvent the\n   * evaluateHook approach but still provide results that have a common format.\n   *\n   * Note that the properties in the \"data\" object will receive priority when\n   * constructing the results. This can be used to override standard results\n   * such as the phase or the centroid.\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {westures-core.State} state - current input state.\n   * @param {Object} data - Results data specific to the recognized gesture.\n   */\n  recognize(hook, state, data) {\n    this.handler({\n      centroid: state.centroid,\n      event:    state.event,\n      phase:    hook,\n      type:     this.type,\n      target:   this.element,\n      ...data,\n    });\n  }\n}\n\nGesture.DEFAULTS = {\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n};\n\nmodule.exports = Gesture;\n\n","'use strict';\n\nconst PointerData = require('./PointerData.js');\nconst { getPropagationPath } = require('./utils.js');\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events.\n *\n * @memberof westures-core\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = new WeakSet(getPropagationPath(event));\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {westures-core.PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * The amount of time elapsed between the start of this input and its latest\n   * event.\n   *\n   * @type {number}\n   */\n  get elapsedTime() { return this.current.time - this.initial.time; }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.point.distanceTo(this.current.point);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n}\n\nmodule.exports = Input;\n\n","'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof westures-core.PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @memberof westures-core\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    const { clientX, clientY } = getEventObject(event, identifier);\n\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.event = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(clientX, clientY);\n  }\n}\n\nmodule.exports = PointerData;\n\n","'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the angle from the centroid to each of the points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the angles to.\n   *\n   * @returns {number[]}\n   */\n  anglesTo(points) {\n    return points.map(point => this.angleTo(point));\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y,\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    total.x /= points.length;\n    total.y /= points.length;\n    return total;\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce(\n      (total, pt) => {\n        total.x += pt.x;\n        total.y += pt.y;\n        return total;\n      },\n      new Point2D(0, 0),\n    );\n  }\n}\n\nmodule.exports = Point2D;\n\n","'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst CANCEL_EVENTS = [\n  'blur',\n  'pointercancel',\n  'touchcancel',\n  'mouseleave',\n];\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst KEYBOARD_EVENTS = [\n  'keydown',\n  'keyup',\n];\n\n/**\n * List of mouse events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\n/**\n * List of pointer events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\n/**\n * List of touch events to listen to.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst TOUCH_EVENTS = [\n  'touchend',\n  'touchmove',\n  'touchstart',\n];\n\n/**\n * List of potentially state-modifying keys.\n * Entries are: ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEYS = [\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n];\n\n/**\n * List of the 'key' values on KeyboardEvent objects of the potentially\n * state-modifying keys.\n *\n * @memberof westures-core\n * @type {string[]}\n */\nconst STATE_KEY_STRINGS = [\n  'Alt',\n  'Control',\n  'Meta',\n  'Shift',\n];\n\n/**\n * The cancel phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst END = 'end';\n\n/**\n * The move phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst MOVE = 'move';\n\n/**\n * The start phase.\n *\n * @memberof westures-core\n * @type {string}\n */\nconst START = 'start';\n\n/**\n * The recognized phases.\n *\n * @memberof westures-core\n * @type {list.<string>}\n */\nconst PHASES = [START, MOVE, END, CANCEL];\n\n/**\n * Object that normalizes the names of window events to be either of type start,\n * move, end, or cancel.\n *\n * @memberof westures-core\n * @type {object}\n */\nconst PHASE = {\n  blur:           CANCEL,\n  pointercancel:  CANCEL,\n  touchcancel:    CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n};\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n  STATE_KEY_STRINGS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n  PHASES,\n};\n\n","'use strict';\n\nconst PI_2   = 2 * Math.PI;\nconst PI_NVE = -Math.PI;\n\n/**\n * Helper function to regulate angular differences, so they don't jump from 0 to\n * 2 * PI or vice versa.\n *\n * @memberof westures-core\n *\n * @param {number} a - Angle in radians.\n * @param {number} b - Angle in radians.\n\n * @return {number} c, given by: c = a - b such that |c| < PI\n */\nfunction angularDifference(a, b) {\n  let diff = a - b;\n  if (diff < PI_NVE) {\n    diff += PI_2;\n  } else if (diff > Math.PI) {\n    diff -= PI_2;\n  }\n  return diff;\n}\n\n/**\n * In case event.composedPath() is not available.\n *\n * @memberof westures-core\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * Performs a set filter operation.\n *\n * @memberof westures-core\n *\n * @param {Set} set - The set to filter.\n * @param {Function} predicate - Function to test elements of 'set'. Receives\n * one argument: the current set element.\n *\n * @return {Set} Set consisting of elements in 'set' for which 'predicate' is\n * true.\n */\nfunction setFilter(set, predicate) {\n  const result = new Set();\n  set.forEach(element => {\n    if (predicate(element)) {\n      result.add(element);\n    }\n  });\n  return result;\n}\n\n/**\n * Performs a set difference operation.\n *\n * @memberof westures-core\n *\n * @param {Set} left - Base set.\n * @param {Set} right - Set of elements to remove from 'left'.\n *\n * @return {Set} Set consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction setDifference(left, right) {\n  return setFilter(left, element => !right.has(element));\n}\n\nmodule.exports = {\n  angularDifference,\n  getPropagationPath,\n  setDifference,\n  setFilter,\n};\n\n","'use strict';\n\nconst State = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEY_STRINGS,\n\n  PHASE,\n\n  CANCEL,\n  END,\n  START,\n} = require('./constants.js');\nconst {\n  setDifference,\n  setFilter,\n} = require('./utils.js');\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element=window - The element which should listen to input\n * events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preferPointer=true] - If false, the region listens\n * to mouse/touch events instead of pointer events.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.touchAction='none'] - Value to set the CSS\n * 'touch-action' property to on elements added to the region.\n */\nclass Region {\n  constructor(element = window, options = {}) {\n    options = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.gestures = new Set();\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.activeGestures = new Set();\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @type {Set.<westures-core.Gesture>}\n     */\n    this.potentialGestures = new Set();\n\n    /**\n     * The element being bound to.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The user-supplied options for the Region.\n     *\n     * @type {object}\n     */\n    this.options = options;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @type {westures-core.State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It also may be a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (this.options.preferPointer && window.PointerEvent) {\n      eventNames = POINTER_EVENTS;\n    } else {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.options.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    const handleKeyboardEvent = this.handleKeyboardEvent.bind(this);\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, handleKeyboardEvent);\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    if (this.options.preventDefault) event.preventDefault();\n    this.state.inputs.forEach(input => {\n      input.update(event);\n    });\n    this.activeGestures.forEach(gesture => {\n      gesture.evaluateHook(CANCEL, this.state);\n    });\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (STATE_KEY_STRINGS.indexOf(event.key) >= 0) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures;\n      this.setActiveGestures();\n\n      setDifference(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      setDifference(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = new Set();\n    this.activeGestures = new Set();\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = setFilter(this.potentialGestures, gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the potentially active gestures.\n   *\n   * @private\n   */\n  setPotentialGestures() {\n    const input = this.state.inputs[0];\n    this.potentialGestures = setFilter(this.gestures, gesture => {\n      return input.initialElements.has(gesture.element);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   * @param {boolean} isInitial - Whether this is an initial contact.\n   */\n  updateActiveGestures(event, isInitial) {\n    if (PHASE[event.type] === START) {\n      if (isInitial) {\n        this.setPotentialGestures();\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    const isInitial = this.state.hasNoInputs();\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event, isInitial);\n\n    if (this.activeGestures.size > 0) {\n      if (this.options.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures(event);\n  }\n\n  /**\n   * Adds the given gesture to the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    gesture.element.style.touchAction = this.options.touchAction;\n    this.gestures.add(gesture);\n  }\n\n  /**\n   * Removes the given gesture from the region.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  removeGesture(gesture) {\n    this.gestures.delete(gesture);\n    this.potentialGestures.delete(gesture);\n    this.activeGestures.delete(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {westures-core.Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return setFilter(this.gestures, gesture => gesture.element === element);\n  }\n\n  /**\n   * Remove all gestures bound to the given element.\n   *\n   * @param {Element} element - The element to unbind.\n   */\n  removeGesturesByElement(element) {\n    this.getGesturesByElement(element).forEach(g => this.removeGesture(g));\n  }\n}\n\nRegion.DEFAULTS = {\n  capture:        false,\n  preferPointer:  true,\n  preventDefault: true,\n  touchAction:    'none',\n};\n\nmodule.exports = Region;\n","'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = {\n  inputs: Symbol.for('inputs'),\n};\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof westure-core.State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @alias [@@inputs]\n     * @type {Map.<westures-core.Input>}\n     * @memberof westure-core.State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {westures-core.Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {westures-core.Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier),\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n\n    // All of 'end', 'move', and 'cancel' perform updates, hence the\n    // following fall-throughs\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = {\n  applySmoothing: true,\n  identity:       0,\n};\n\nmodule.exports = Smoothable;\n\n"],"names":[],"version":3,"file":"index.js.map"}