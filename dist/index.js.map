{"version":3,"sources":["src/Gesture.js","src/Point2D.js","src/Binding.js","src/PHASE.js","src/PointerData.js","src/Input.js","src/State.js","src/Region.js","src/Smoothable.js","index.js"],"names":["nextGestureNum","Gesture","type","TypeError","id","module","exports","Point2D","x","y","point","Math","atan2","points","totalDistanceTo","length","hypot","reduce","d","p","distanceTo","total","sum","pt","plus","Binding","element","gesture","handler","hook","state","data","centroid","event","phase","radius","target","PHASE","Object","freeze","mousedown","touchstart","pointerdown","mousemove","touchmove","pointermove","mouseup","touchend","pointerup","touchcancel","pointercancel","require","getEventObject","identifier","changedTouches","Array","from","find","touch","PointerData","originalEvent","time","Date","now","eventObj","clientX","clientY","pdata","angleTo","getPropagationPath","composedPath","path","node","document","parentNode","push","window","getElementsInPath","WeakSet","Input","currentData","initialElements","initial","current","previous","progress","has","symbols","inputs","Symbol","for","update_fns","TouchEvent","forEach","updateInput","PointerEvent","pointerId","MouseEvent","button","State","Map","active","activePoints","v","k","delete","filter","i","size","set","setPointerCapture","e","releasePointerCapture","get","update","console","warn","constructor","name","call","updateFields","values","getInputsNotInPhase","map","acc","cur","dist","POINTER_EVENTS","MOUSE_EVENTS","TOUCH_EVENTS","CANCEL_EVENTS","Region","capture","preventDefault","bindings","activeBindings","isWaiting","activate","eventNames","concat","arbiter","arbitrate","bind","eventName","addEventListener","once","passive","eventname","resetActiveBindings","input","b","wasInitiallyInside","hasNoActiveInputs","updateAllInputs","updateActiveBindings","binding","evaluateHook","clearEndedInputs","pruneActiveBindings","getBindingsByElement","splice","indexOf","DEFAULTS","cascade","smooth","smoothingIsApplicable","isRequested","matchMedia","matches","Smoothable","superclass","options","smoothing","identity","next","field","avg","smoothingAverage","a"],"mappings":";AAIA,aAqFA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAnFA,IAAIA,EAAiB,EAWfC,EAwEN,WAvEcC,SAAAA,EAAAA,GACN,GADY,EAAA,KAAA,GACI,iBAATA,EACH,MAAA,IAAIC,UAAU,yCAQjBD,KAAAA,KAAOA,EASPE,KAAAA,GAAgB,WAAA,OAAA,KAAKF,KAAQF,KAAAA,OAAAA,KAoDtC,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAzCU,MAAA,WACC,OAAA,OAwCX,CAAA,IAAA,OA7BS,MAAA,WACE,OAAA,OA4BX,CAAA,IAAA,MAjBQ,MAAA,WACG,OAAA,OAgBX,CAAA,IAAA,SALW,MAAA,WACA,OAAA,SAIX,EAAA,GAAAK,OAAOC,QAAUL;;ACrFjB,aAsJA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3IMM,IAAAA,EA2IN,WA1I4B,SAAA,IAAdC,IAAAA,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAGC,EAAI,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAG,EAAA,KAAA,GAMnBD,KAAAA,EAAIA,EAOJC,KAAAA,EAAIA,EA6Hb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAjHUC,MAAAA,SAAAA,GACCC,OAAAA,KAAKC,MAAMF,EAAMD,EAAI,KAAKA,EAAGC,EAAMF,EAAI,KAAKA,KAgHvD,CAAA,IAAA,oBAnGoBK,MAAAA,SAAAA,GACT,OAAA,KAAKC,gBAAgBD,GAAUA,EAAOE,SAkGjD,CAAA,IAAA,QA1FU,MAAA,WACC,OAAA,IAAIR,EAAQ,KAAKC,EAAG,KAAKC,KAyFpC,CAAA,IAAA,aA7EaC,MAAAA,SAAAA,GACFC,OAAAA,KAAKK,MAAMN,EAAMF,EAAI,KAAKA,EAAGE,EAAMD,EAAI,KAAKA,KA4EvD,CAAA,IAAA,QAjEQC,MAAAA,SAAAA,GACG,OAAA,IAAIH,EACT,KAAKC,EAAIE,EAAMF,EACf,KAAKC,EAAIC,EAAMD,KA8DrB,CAAA,IAAA,OAlDOC,MAAAA,SAAAA,GACI,OAAA,IAAIH,EACT,KAAKC,EAAIE,EAAMF,EACf,KAAKC,EAAIC,EAAMD,KA+CrB,CAAA,IAAA,kBAnCkBI,MAAAA,SAAAA,GAAQ,IAAA,EAAA,KACfA,OAAAA,EAAOI,OAAO,SAACC,EAAGC,GAAMD,OAAAA,EAAI,EAAKE,WAAWD,IAAI,MAkC3D,CAAA,CAAA,IAAA,WAvB+B,MAAA,WAAbN,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACnBA,GAAkB,IAAlBA,EAAOE,OAAc,OAAO,KAE1BM,IAAAA,EAAQd,EAAQe,IAAIT,GACnB,OAAA,IAAIN,EACTc,EAAMb,EAAIK,EAAOE,OACjBM,EAAMZ,EAAII,EAAOE,UAiBvB,CAAA,IAAA,MAL0B,MAAA,WACfF,OADW,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IACJI,OAAO,SAACI,EAAOE,GAAOF,OAAAA,EAAMG,KAAKD,IAAK,IAAIhB,EAAQ,EAAG,QAIvE,EAAA,GAAAF,OAAOC,QAAUC;;ACtJjB,aA+DA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EApDMkB,IAAAA,EAoDN,WAnDcC,SAAAA,EAAAA,EAASC,EAASC,GAAS,EAAA,KAAA,GAOhCF,KAAAA,QAAUA,EAQVC,KAAAA,QAAUA,EASVC,KAAAA,QAAUA,EA2BnB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAhBeC,MAAAA,SAAAA,EAAMC,GACXC,IAAAA,EAAO,KAAKJ,QAAQE,GAAMC,GAC5BC,GACGH,KAAAA,QAAL,EAAA,CACEI,SAAUF,EAAME,SAChBC,MAAUH,EAAMG,MAChBC,MAAUL,EACVM,OAAUL,EAAMK,OAChBjC,KAAU,KAAKyB,QAAQzB,KACvBkC,OAAU,KAAKV,SACZK,QAMX,EAAA,GAAA1B,OAAOC,QAAUmB;;AC9DjB,aAQA,IAAMY,EAAQC,OAAOC,OAAO,CAC1BC,UAAa,QACbC,WAAa,QACbC,YAAa,QAEbC,UAAa,OACbC,UAAa,OACbC,YAAa,OAEbC,QAAe,MACfC,SAAe,MACfC,UAAe,MAEfC,YAAe,SACfC,cAAe,WAGjB7C,OAAOC,QAAU+B;;AC1BjB,aAyFA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAvFA,IAAM9B,EAAU4C,QAAQ,gBAClBd,EAAUc,QAAQ,cAUxB,SAASC,EAAenB,EAAOoB,GACzBpB,OAAAA,EAAMqB,eACDC,MAAMC,KAAKvB,EAAMqB,gBAAgBG,KAAK,SAAAC,GACpCA,OAAAA,EAAML,aAAeA,IAGzBpB,EAUH0B,IAAAA,EA4DN,WA3Dc1B,SAAAA,EAAAA,EAAOoB,GAAY,EAAA,KAAA,GAMxBO,KAAAA,cAAgB3B,EAQhB/B,KAAAA,KAAOmC,EAAMJ,EAAM/B,MAQnB2D,KAAAA,KAAOC,KAAKC,MAEXC,IAAAA,EAAWZ,EAAenB,EAAOoB,GAOlC3C,KAAAA,MAAQ,IAAIH,EAAQyD,EAASC,QAASD,EAASE,SA4BxD,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAjBUC,MAAAA,SAAAA,GACC,OAAA,KAAKzD,MAAM0D,QAAQD,EAAMzD,SAgBpC,CAAA,IAAA,aALayD,MAAAA,SAAAA,GACF,OAAA,KAAKzD,MAAMU,WAAW+C,EAAMzD,WAIvC,EAAA,GAAAL,OAAOC,QAAUqD;;ACzFjB,aA4KA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1KA,IAAMA,EAAcR,QAAQ,oBAa5B,SAASkB,EAAmBpC,GACtB,GAA8B,mBAAvBA,EAAMqC,aACRrC,OAAAA,EAAMqC,eAIV,IADCC,IAAAA,EAAO,GACJC,EAAOvC,EAAMG,OAAQoC,IAASC,SAAUD,EAAOA,EAAKE,WAC3DH,EAAKI,KAAKH,GAKLD,OAHPA,EAAKI,KAAKF,UACVF,EAAKI,KAAKC,QAEHL,EAYT,SAASM,EAAkB5C,GAClB,OAAA,IAAI6C,QAAQT,EAAmBpC,IAalC8C,IAAAA,EAuHN,WAtHc9C,SAAAA,EAAAA,EAAOoB,GAAY,EAAA,KAAA,GACvB2B,IAAAA,EAAc,IAAIrB,EAAY1B,EAAOoB,GAStC4B,KAAAA,gBAAkBJ,EAAkB5C,GAQpCiD,KAAAA,QAAUF,EAOVG,KAAAA,QAAUH,EAOVI,KAAAA,SAAWJ,EAQX3B,KAAAA,WAAaA,EASbgC,KAAAA,SAAW,GAqEpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,uBA7CuBjF,MAAAA,SAAAA,GAIZ,OAHF,KAAKiF,SAASjF,KACZiF,KAAAA,SAASjF,GAAM,IAEf,KAAKiF,SAASjF,KAyCzB,CAAA,IAAA,gBAlCkB,MAAA,WACP,OAAA,KAAK8E,QAAQ9D,WAAW,KAAK+D,WAiCxC,CAAA,IAAA,SArBSlD,MAAAA,SAAAA,GACAmD,KAAAA,SAAW,KAAKD,QAChBA,KAAAA,QAAU,IAAIxB,EAAY1B,EAAO,KAAKoB,cAmB/C,CAAA,IAAA,qBALqB3B,MAAAA,SAAAA,GACV,OAAA,KAAKuD,gBAAgBK,IAAI5D,KAIpC,CAAA,IAAA,QA7Dc,IAAA,WAAS,OAAA,KAAKyD,QAAQjF,OA6DpC,CAAA,IAAA,YAtDkB,IAAA,WAAS,OAAA,KAAKgF,QAAQrB,SAsDxC,EAAA,GAAAxD,OAAOC,QAAUyE;;AC5KjB,aA6MA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3MA,IAAMA,EAAU5B,QAAQ,cAClBd,EAAUc,QAAQ,cAClB5C,EAAU4C,QAAQ,gBAElBoC,EAAUjD,OAAOC,OAAO,CAC5BiD,OAAQC,OAAOC,IAAI,YAWfC,EAAa,CACjBC,WAAY,SAAoB3D,GAAO,IAAA,EAAA,KACrCsB,MAAMC,KAAKvB,EAAMqB,gBAAgBuC,QAAQ,SAAAnC,GACvC,EAAKoC,YAAY7D,EAAOyB,EAAML,eAIlC0C,aAAc,SAAsB9D,GAC7B6D,KAAAA,YAAY7D,EAAOA,EAAM+D,YAGhCC,WAAY,SAAoBhE,GACT,IAAjBA,EAAMiE,QACHJ,KAAAA,YAAY7D,EAAOA,EAAMiE,UAW9BC,EAmKN,WAlKczE,SAAAA,EAAAA,GAAS,EAAA,KAAA,GAOdA,KAAAA,QAAUA,EAUV6D,KAAAA,EAAQC,QAAU,IAAIY,IAOtBZ,KAAAA,OAAS,GAQTa,KAAAA,OAAS,GAQTC,KAAAA,aAAe,GAOftE,KAAAA,SAAW,GAOXC,KAAAA,MAAQ,KA4GjB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,mBApGqB,MAAA,WAAA,IAAA,EAAA,KACZsD,KAAAA,EAAQC,QAAQK,QAAQ,SAACU,EAAGC,GACf,QAAZD,EAAErE,OAAiB,EAAKqD,EAAQC,QAAQiB,OAAOD,OAkGzD,CAAA,IAAA,mBAzFmBtE,MAAAA,SAAAA,GACR,OAAA,KAAKsD,OAAOkB,OAAO,SAAAC,GAAKA,OAAAA,EAAEzE,QAAUA,MAwF/C,CAAA,IAAA,sBAhFsBA,MAAAA,SAAAA,GACX,OAAA,KAAKsD,OAAOkB,OAAO,SAAAC,GAAKA,OAAAA,EAAEzE,QAAUA,MA+E/C,CAAA,IAAA,oBAxEsB,MAAA,WACX,OAA8B,IAA9B,KAAKqD,EAAQC,QAAQoB,OAuEhC,CAAA,IAAA,cA5Dc3E,MAAAA,SAAAA,EAAOoB,GACThB,OAAAA,EAAMJ,EAAM/B,OACf,IAAA,QACEqF,KAAAA,EAAQC,QAAQqB,IAAIxD,EAAY,IAAI0B,EAAM9C,EAAOoB,IAClD,IACG3B,KAAAA,QAAQoF,kBAAkBzD,GAC/B,MAAO0D,IAGT,MACG,IAAA,MACC,IACGrF,KAAAA,QAAQsF,sBAAsB3D,GACnC,MAAO0D,IAKN,IAAA,OACA,IAAA,SACC,KAAKxB,EAAQC,QAAQF,IAAIjC,IACtBkC,KAAAA,EAAQC,QAAQyB,IAAI5D,GAAY6D,OAAOjF,GAE9C,MACF,QACEkF,QAAQC,KAAiCnF,4BAAAA,OAAAA,EAAM/B,UAmCrD,CAAA,IAAA,kBAzBkB+B,MAAAA,SAAAA,GACd0D,EAAW1D,EAAMoF,YAAYC,MAAMC,KAAK,KAAMtF,GACzCuF,KAAAA,aAAavF,KAuBtB,CAAA,IAAA,eAd6B,MAAA,WAAA,IAAA,EAAA,KAAdA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KACduD,KAAAA,OAASjC,MAAMC,KAAK,KAAK+B,EAAQC,QAAQiC,UACzCpB,KAAAA,OAAS,KAAKqB,oBAAoB,OAClCpB,KAAAA,aAAe,KAAKD,OAAOsB,IAAI,SAAAhB,GAAKA,OAAAA,EAAExB,QAAQzE,QAC9CsB,KAAAA,SAAWzB,EAAQyB,SAAS,KAAKsE,cAEjCnE,KAAAA,OAAS,KAAKmE,aAAarF,OAAO,SAAC2G,EAAKC,GACrCC,IAAAA,EAAOD,EAAIzG,WAAW,EAAKY,UAC1B8F,OAAAA,EAAOF,EAAME,EAAOF,GAC1B,GACC3F,IAAO,KAAKA,MAAQA,OAI5B,EAAA,GAAA5B,OAAOC,QAAU6F;;AC7MjB,aAkRA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAhRA,IAAM1E,EAAU0B,QAAQ,gBAClBgD,EAAUhD,QAAQ,cAClBd,EAAUc,QAAQ,cAElB4E,EAAiB,CACrB,cACA,cACA,aAGIC,EAAe,CACnB,YACA,YACA,WAGIC,EAAe,CACnB,aACA,YACA,YAGIC,EAAgB,CACpB,gBACA,eAqBIC,EAmON,WAjOczG,SAAAA,EAAAA,GAAS0G,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAAOC,IAAiB,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAAM,EAAA,KAAA,GAStDC,KAAAA,SAAW,GAQXC,KAAAA,eAAiB,GAQjBC,KAAAA,WAAY,EAQZ9G,KAAAA,QAAUA,EAQV0G,KAAAA,QAAUA,EASVC,KAAAA,eAAiBA,EAQjBvG,KAAAA,MAAQ,IAAIqE,EAAM,KAAKzE,SAGvB+G,KAAAA,WAoKT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,WA3Ja,MAAA,WAAA,IAAA,EAAA,KAqBLC,EAAa,GAEfA,EADE9D,OAAOgB,YAAchB,OAAOqB,WACjB+B,EAAaW,OAAOV,GAEpBF,EAITa,IAAAA,EAAU,KAAKC,UAAUC,KAAK,MACpCJ,EAAW7C,QAAQ,SAAAkD,GACjB,EAAKrH,QAAQsH,iBAAiBD,EAAWH,EAAS,CAChDR,QAAS,EAAKA,QACda,MAAS,EACTC,SAAS,MAIZ,CAAA,QAAQP,OAAOT,GAAerC,QAAQ,SAAAsD,GACrCvE,OAAOoE,iBAAiBG,EAAW,SAACpC,GAClCA,EAAEsB,iBACF,EAAKvG,MAAQ,IAAIqE,EAAM,EAAKzE,SAC5B,EAAK0H,4BAiHb,CAAA,IAAA,sBAvGwB,MAAA,WACfb,KAAAA,eAAiB,GACjBC,KAAAA,WAAY,IAqGrB,CAAA,IAAA,uBA7FyB,MAAA,WACjB,GAAA,KAAKA,WAAa,KAAK1G,MAAM0D,OAAOzE,OAAS,EAAG,CAC5CsI,IAAAA,EAAQ,KAAKvH,MAAM0D,OAAO,GAC3B+C,KAAAA,eAAiB,KAAKD,SAAS5B,OAAO,SAAA4C,GAClCD,OAAAA,EAAME,mBAAmBD,EAAE5H,WAE/B8G,KAAAA,WAAY,KAuFvB,CAAA,IAAA,sBA9EwB,MAAA,WAChB,KAAK1G,MAAM0H,qBACRJ,KAAAA,wBA4EX,CAAA,IAAA,YA/DYnH,MAAAA,SAAAA,GAAO,IAAA,EAAA,KACVH,KAAAA,MAAM2H,gBAAgBxH,GACtByH,KAAAA,uBAED,KAAKnB,eAAexH,OAAS,IAC3B,KAAKsH,gBAAgBpG,EAAMoG,iBAE1BE,KAAAA,eAAe1C,QAAQ,SAAA8D,GAC1BA,EAAQC,aAAavH,EAAMJ,EAAM/B,MAAO,EAAK4B,UAI5CA,KAAAA,MAAM+H,mBACNC,KAAAA,wBAkDT,CAAA,IAAA,aAvCapI,MAAAA,SAAAA,EAASC,EAASC,GACtB0G,KAAAA,SAAS3D,KAAK,IAAIlD,EAAQC,EAASC,EAASC,MAsCrD,CAAA,IAAA,uBA1BuBF,MAAAA,SAAAA,GACZ,OAAA,KAAK4G,SAAS5B,OAAO,SAAA4C,GAAKA,OAAAA,EAAE5H,UAAYA,MAyBnD,CAAA,IAAA,iBAdiBA,MAAAA,SAAAA,EAASC,GAAS,IAAA,EAAA,KAC1BoI,KAAAA,qBAAqBrI,GAASmE,QAAQ,SAAAyD,GAC1B,MAAX3H,GAAmB2H,EAAE3H,UAAYA,GACnC,EAAK2G,SAAS0B,OAAO,EAAK1B,SAAS2B,QAAQX,GAAI,SAWvD,EAAA,GALAnB,EAAO+B,SAAW5H,OAAOC,OAAO,CAC9B6F,SAAgB,EAChBC,gBAAgB,IAGlBhI,OAAOC,QAAU6H;;AClRjB,aA2IA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,OAAA,GAAA,WAAA,EAAA,IAAA,mBAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAzIA,IAAMgC,EAAU1E,OAAO,WACjB2E,EAAS3E,OAAO,UAmBtB,SAAS4E,IACHC,KADuC,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GAErC,IACK1F,OAAAA,OAAO2F,WAAW,qBAAqBC,QAC9C,MAAOzD,GACA,OAAA,EAGJ,OAAA,EAwBT,IAAM0D,EAAa,SAACC,GAAD,OAAA,SAAA,GACLpD,SAAAA,EAAAA,GAAoB,IAAA,EAAdqD,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAI,OAAA,EAAA,KAAA,IACxBrD,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,EAAMqD,KAUPP,OAAS,KACVC,EAAsBM,EAAQC,WAC3BR,EAAAA,OAAS,EAAKA,GAAQtB,KAA3B,EAAA,IAEKsB,EAAAA,OAAS,SAAArI,GAAQA,OAAAA,GAWnB8I,EAAAA,SAAW,EAYXV,EAAAA,GAAW,EAAKU,SAtCS,EADf,OAAA,EAAA,EAAyCH,GAAzC,EAAA,EAAA,CAAA,CAAA,IAAA,UA+CP,MAAA,WACHP,KAAAA,GAAW,KAAKU,WAhDN,CA8DhBT,IAAAA,EAAQU,MAAAA,SAAAA,EAAMC,GACPC,IAAAA,EAAM,KAAKC,iBAAiB,KAAKd,GAAUW,EAAKC,IAG/CD,OAFFX,KAAAA,GAAWa,EAChBF,EAAKC,GAASC,EACPF,IAlEQ,CAAA,IAAA,mBAgFAI,MAAAA,SAAAA,EAAG5B,GACX,OAAC4B,EAAI5B,GAAK,MAjFF,EAAA,IAqFnBjJ,OAAOC,QAAUmK;;ACvIjB,aAEA,IAAMxK,EAAUkD,QAAQ,oBAClB5C,EAAU4C,QAAQ,oBAClBgF,EAAShF,QAAQ,mBACjBsH,EAAatH,QAAQ,uBAE3B9C,OAAOC,QAAU,CACfL,QAAAA,EACAM,QAAAA,EACA4H,OAAAA,EACAsC,WAAAA","file":"index.js","sourceRoot":"..","sourcesContent":["/*\n * Contains the Gesture class\n */\n\n'use strict';\n\nlet nextGestureNum = 0;\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n */\nclass Gesture {\n  constructor(type) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${nextGestureNum++}`;\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n}\n\nmodule.exports = Gesture;\n\n","/*\n * Contains the {@link Point2D} class.\n */\n\n'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    return new Point2D(\n      total.x / points.length,\n      total.y / points.length,\n    );\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce((total, pt) => total.plus(pt), new Point2D(0, 0));\n  }\n}\n\nmodule.exports = Point2D;\n\n","/*\n * Contains the Binding class.\n */\n\n'use strict';\n\n/**\n * A Binding associates a gesture with an element and a handler function that\n * will be called when the gesture is recognized.\n *\n * @param {Element} element - The element to which to associate the gesture.\n * @param {westures-core.Gesture} gesture - A instance of the Gesture type.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n */\nclass Binding {\n  constructor(element, gesture, handler) {\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The gesture to associate with the given element.\n     *\n     * @private\n     * @type {westures-core.Gesture}\n     */\n    this.gesture = gesture;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @private\n     * @type {Function}\n     */\n    this.handler = handler;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced.\n   *\n   * @private\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this.gesture[hook](state);\n    if (data) {\n      this.handler({\n        centroid: state.centroid,\n        event:    state.event,\n        phase:    hook,\n        radius:   state.radius,\n        type:     this.gesture.type,\n        target:   this.element,\n        ...data,\n      });\n    }\n  }\n}\n\nmodule.exports = Binding;\n\n","/*\n * Contains the PHASE object, which translates event names to phases\n * (a.k.a. hooks).\n */\n\n'use strict';\n\n/**\n * Normalizes window events to be either of type start, move, or end.\n *\n * @private\n * @enum {string}\n */\nconst PHASE = Object.freeze({\n  mousedown:   'start',\n  touchstart:  'start',\n  pointerdown: 'start',\n\n  mousemove:   'move',\n  touchmove:   'move',\n  pointermove: 'move',\n\n  mouseup:       'end',\n  touchend:      'end',\n  pointerup:     'end',\n\n  touchcancel:   'cancel',\n  pointercancel: 'cancel',\n});\n\nmodule.exports = PHASE;\n\n","/*\n * Contains the {@link PointerData} class\n */\n\n'use strict';\n\nconst Point2D = require('./Point2D.js');\nconst PHASE   = require('./PHASE.js');\n\n/**\n * @private\n * @inner\n * @memberof PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains clientX, clientY values.\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n */\nclass PointerData {\n  constructor(event, identifier) {\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end'.\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    const eventObj = getEventObject(event, identifier);\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    // this.point = new Point2D(eventObj.pageX, eventObj.pageY);\n    this.point = new Point2D(eventObj.clientX, eventObj.clientY);\n  }\n\n  /**\n   * Calculates the angle between this event and the given event.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} Radians measurement between this event and the given\n   *    event's points.\n   */\n  angleTo(pdata) {\n    return this.point.angleTo(pdata.point);\n  }\n\n  /**\n   * Calculates the distance between two PointerDatas.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(pdata) {\n    return this.point.distanceTo(pdata.point);\n  }\n}\n\nmodule.exports = PointerData;\n\n","/*\n * Contains the {@link Input} class\n */\n\n'use strict';\n\nconst PointerData = require('./PointerData.js');\n\n/**\n * In case event.composedPath() is not available.\n *\n * @private\n * @inner\n * @memberof Input\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * A WeakSet is used so that references will be garbage collected when the\n * element they point to is removed from the page.\n *\n * @private\n * @inner\n * @memberof Input\n * @return {WeakSet.<Element>} The Elements in the path of the given event.\n */\nfunction getElementsInPath(event) {\n  return new WeakSet(getPropagationPath(event));\n}\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n *    which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n *    be located in subsequent Event objects.\n */\nclass Input {\n  constructor(event, identifier) {\n    const currentData = new PointerData(event, identifier);\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @private\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = getElementsInPath(event);\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n\n    /**\n     * Stores internal state between events for each gesture based off of the\n     * gesture's id.\n     *\n     * @private\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @private\n   *\n   * @param {string} id - The ID of the gesture whose progress is sought.\n   *\n   * @return {Object} The progress of the gesture.\n   */\n  getProgressOfGesture(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.distanceTo(this.current);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @private\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier);\n  }\n\n  /**\n   * Determines if this PointerData was inside the given element at the time it\n   * was dispatched.\n   *\n   * @private\n   *\n   * @param {Element} element\n   *\n   * @return {boolean} true if the Input began inside the element, false\n   *    otherwise.\n   */\n  wasInitiallyInside(element) {\n    return this.initialElements.has(element);\n  }\n}\n\nmodule.exports = Input;\n\n","/*\n * Contains the {@link State} class\n */\n\n'use strict';\n\nconst Input   = require('./Input.js');\nconst PHASE   = require('./PHASE.js');\nconst Point2D = require('./Point2D.js');\n\nconst symbols = Object.freeze({\n  inputs: Symbol.for('inputs'),\n});\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @param {Element} element - The element underpinning the associated Region.\n */\nclass State {\n  constructor(element) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @private\n     * @alias [@@inputs]\n     * @type {Map.<Input>}\n     * @memberof State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   *\n   * @private\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', or 'end'.\n   *\n   * @return {Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', or 'end'.\n   *\n   * @return {Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @private\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoActiveInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case 'start':\n      this[symbols.inputs].set(identifier, new Input(event, identifier));\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n    case 'end':\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      // All of 'end', 'move', and 'cancel' perform updates, hence the\n      // following fall-throughs\n    case 'move':\n    case 'cancel':\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event = null) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    // XXX: Delete this.radius for next released. It is not generally useful.\n    this.radius = this.activePoints.reduce((acc, cur) => {\n      const dist = cur.distanceTo(this.centroid);\n      return dist > acc ? dist : acc;\n    }, 0);\n    if (event) this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","/*\n * Contains the {@link Region} class\n */\n\n'use strict';\n\nconst Binding = require('./Binding.js');\nconst State   = require('./State.js');\nconst PHASE   = require('./PHASE.js');\n\nconst POINTER_EVENTS = [\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n];\n\nconst MOUSE_EVENTS = [\n  'mousedown',\n  'mousemove',\n  'mouseup',\n];\n\nconst TOUCH_EVENTS = [\n  'touchstart',\n  'touchmove',\n  'touchend',\n];\n\nconst CANCEL_EVENTS = [\n  'pointercancel',\n  'touchcancel',\n];\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element which should listen to input events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.source='page'] - One of 'page', 'client', or\n * 'screen'. Determines what the source of (x,y) coordinates will be from the\n * input events. ('X' and 'Y' will be appended, then those are the properties\n * that will be looked up). *** NOT YET IMPLEMENTED ***\n */\nclass Region {\n  // constructor(element, options = {}) {\n  constructor(element, capture = false, preventDefault = true) {\n    // const settings = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @private\n     * @type {Binding[]}\n     */\n    this.bindings = [];\n\n    /**\n     * The list of active bindings for the current input session.\n     *\n     * @private\n     * @type {Binding[]}\n     */\n    this.activeBindings = [];\n\n    /**\n     * Whether an input session is currently active.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.isWaiting = true;\n\n    /**\n     * The element being bound to.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.capture = capture;\n\n    /**\n     * Whether the default browser functionality should be disabled. This option\n     * should most likely be ignored. Here there by dragons if set to false.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.preventDefault = preventDefault;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @private\n     * @type {State}\n     */\n    this.state = new State(this.element);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Having to listen to both mouse and touch events is annoying, but\n     * necessary due to conflicting standards and browser implementations.\n     * Pointer is a fallback for now instead of the primary, until I figure out\n     * all the details to do with pointer-events and touch-action and their\n     * cross browser compatibility.\n     *\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It is also a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (window.TouchEvent || window.MouseEvent) {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    } else {\n      eventNames = POINTER_EVENTS;\n    }\n\n    // Bind detected browser events to the region element.\n    const arbiter = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbiter, {\n        capture: this.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    ['blur'].concat(CANCEL_EVENTS).forEach(eventname => {\n      window.addEventListener(eventname, (e) => {\n        e.preventDefault();\n        this.state = new State(this.element);\n        this.resetActiveBindings();\n      });\n    });\n  }\n\n  /**\n   * Resets the active bindings.\n   *\n   * @private\n   */\n  resetActiveBindings() {\n    this.activeBindings = [];\n    this.isWaiting = true;\n  }\n\n  /**\n   * Selects the bindings that are active for the current input sequence.\n   *\n   * @private\n   */\n  updateActiveBindings() {\n    if (this.isWaiting && this.state.inputs.length > 0) {\n      const input = this.state.inputs[0];\n      this.activeBindings = this.bindings.filter(b => {\n        return input.wasInitiallyInside(b.element);\n      });\n      this.isWaiting = false;\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   */\n  pruneActiveBindings() {\n    if (this.state.hasNoActiveInputs()) {\n      this.resetActiveBindings();\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which bindings to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    this.state.updateAllInputs(event);\n    this.updateActiveBindings();\n\n    if (this.activeBindings.length > 0) {\n      if (this.preventDefault) event.preventDefault();\n\n      this.activeBindings.forEach(binding => {\n        binding.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveBindings();\n  }\n\n  /**\n   * Bind an element to a gesture with an associated handler.\n   *\n   * @param {Element} element - The element object.\n   * @param {westures-core.Gesture} gesture - Gesture type with which to bind.\n   * @param {Function} handler - The function to execute when a gesture is\n   *    recognized.\n   */\n  addGesture(element, gesture, handler) {\n    this.bindings.push(new Binding(element, gesture, handler));\n  }\n\n  /**\n   * Retrieves Bindings by their associated element.\n   *\n   * @private\n   *\n   * @param {Element} element - The element for which to find bindings.\n   *\n   * @return {Binding[]} Bindings to which the element is bound.\n   */\n  getBindingsByElement(element) {\n    return this.bindings.filter(b => b.element === element);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture or all if no gesture\n   * is specified.\n   *\n   * @param {Element} element - The element to unbind.\n   * @param {westures-core.Gesture} [ gesture ] - The gesture to unbind. If\n   * undefined, will unbind all Bindings associated with the given element.\n   */\n  removeGestures(element, gesture) {\n    this.getBindingsByElement(element).forEach(b => {\n      if (gesture == null || b.gesture === gesture) {\n        this.bindings.splice(this.bindings.indexOf(b), 1);\n      }\n    });\n  }\n}\n\nRegion.DEFAULTS = Object.freeze({\n  capture:        false,\n  preventDefault: true,\n});\n\nmodule.exports = Region;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:\n *  1. The user explicitly requests that it be turned off.\n *  2. The active poiner is not \"coarse\".\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @private\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested = true) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable gesture is one that emits on 'move' events. It provides a\n * 'smoothing' option through its constructor, and will apply smoothing before\n * emitting. There will be a tiny, ~1/60th of a second delay to emits, as well\n * as a slight amount of drift over gestures sustained for a long period of\n * time.\n *\n * For a gesture to make use of smoothing, it must return `this.smooth(data,\n * field)` from the `move` phase, instead of returning the data directly. If the\n * data being smoothed is not a simple number, it must also override the\n * `smoothingAverage(a, b)` method. Also you will probably want to call\n * `super.restart()` at some point in the `start`, `end`, and `cancel` phases.\n *\n * @memberof westures-core\n * @mixin\n *\n * @param {string} name - The name of the gesture.\n * @param {Object} [options]\n * @param {boolean} [options.smoothing=true] Whether to apply smoothing to\n * emitted data.\n */\nconst Smoothable = (superclass) => class Smoothable extends superclass {\n  constructor(name, options = {}) {\n    super(name, options);\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @memberof westures-core.Smoothable\n     *\n     * @type {function}\n     * @param {object} data - The data to emit.\n     */\n    this.smooth = null;\n    if (smoothingIsApplicable(options.smoothing)) {\n      this.smooth = this[smooth].bind(this);\n    } else {\n      this.smooth = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @memberof westures-core.Smoothable\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = 0;\n\n    /**\n     * Stage the emitted data once.\n     *\n     * @private\n     * @static\n     * @memberof westures-core.Smoothable\n     *\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   *\n   * @memberof westures-core.Smoothable\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @private\n   * @memberof westures-core.Smoothable\n   *\n   * @param {object} next - The next batch of data to emit.\n   * @param {string} field - The field to which smoothing should be applied.\n   *\n   * @return {?object}\n   */\n  [smooth](next, field) {\n    const avg = this.smoothingAverage(this[cascade], next[field]);\n    this[cascade] = avg;\n    next[field] = avg;\n    return next;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm.\n   *\n   * @private\n   * @memberof westures-core.Smoothable\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  smoothingAverage(a, b) {\n    return (a + b) / 2;\n  }\n};\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for Westures. Exposes a constructor for the Region\n * and the generic Gesture class for user gestures to implement, as well as the\n * Point2D class, which may be useful.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Point2D = require('./src/Point2D.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\n\nmodule.exports = {\n  Gesture,\n  Point2D,\n  Region,\n  Smoothable,\n};\n\n"]}