{"version":3,"sources":["src/Gesture.js","src/Point2D.js","src/constants.js","src/PointerData.js","src/Input.js","src/State.js","src/Region.js","src/Smoothable.js","index.js"],"names":["g_id","Gesture","type","element","handler","options","TypeError","id","DEFAULTS","state","count","active","length","event","enableKeys","disableKeys","minInputs","maxInputs","some","k","hook","data","centroid","phase","radius","target","Object","freeze","Number","MAX_VALUE","module","exports","Point2D","x","y","point","Math","atan2","points","totalDistanceTo","hypot","reduce","d","p","distanceTo","total","sum","pt","plus","CANCEL_EVENTS","KEYBOARD_EVENTS","MOUSE_EVENTS","POINTER_EVENTS","TOUCH_EVENTS","STATE_KEYS","CANCEL","END","MOVE","START","PHASE","pointercancel","touchcancel","mouseup","pointerup","touchend","mousemove","pointermove","touchmove","mousedown","pointerdown","touchstart","require","getEventObject","identifier","changedTouches","Array","from","find","touch","PointerData","source","originalEvent","time","Date","now","eventObj","pdata","angleTo","getPropagationPath","composedPath","path","node","document","parentNode","push","window","getElementsInPath","WeakSet","Input","currentData","initialElements","initial","current","previous","progress","has","symbols","inputs","Symbol","for","update_fns","TouchEvent","forEach","updateInput","PointerEvent","pointerId","MouseEvent","button","State","Map","activePoints","v","delete","filter","i","size","set","setPointerCapture","e","releasePointerCapture","get","update","console","warn","constructor","name","call","updateFields","values","getInputsNotInPhase","map","acc","cur","dist","arrayMinus","left","right","indexOf","stateKeysWereChanged","stateKeysArray","currentKeys","newKeys","diff","Region","settings","gestures","activeGestures","potentialGestures","capture","preventDefault","activate","eventNames","concat","arbitrate","bind","eventName","addEventListener","once","passive","cancel","setActiveGestures","gesture","evaluateHook","resetActiveGestures","oldActiveGestures","slice","isEnabled","input","wasInitiallyInside","hasNoActiveInputs","updateAllInputs","updateActiveGestures","clearEndedInputs","pruneActiveGestures","b","getGesturesByElement","splice","cascade","smooth","smoothingIsApplicable","isRequested","matchMedia","matches","Smoothable","final_options","next","applySmoothing","identity","average","a"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["/*\n * Contains the Gesture class\n */\n\n'use strict';\n\nlet g_id = 0;\n\n/**\n * One of ['ctrlKey', 'altKey', 'shiftKey', 'metaKey']\n *\n * @typedef {string} StateKey\n * @memberof westures-core.Gesture\n */\n\n/**\n * The Gesture class that all gestures inherit from. A custom gesture class will\n * need to override some or all of the four phase \"hooks\": start, move, end, and\n * cancel.\n *\n * @memberof westures-core\n *\n * @param {string} type - The name of the gesture.\n * @param {Element} element - The element to which to associate the gesture.\n * @param {Function} handler - The function handler to execute when a gesture\n *    is recognized on the associated element.\n * @param {object} [options] - Generic gesture options\n * @param {westures-core.Gesture.StateKey[]} [options.enableKeys] - List of keys\n * which will enable the gesture. The gesture will not be recognized unless one\n * of these keys is pressed while the interaction occurs. If not specified or an\n * empty list, the gesture is treated as though the enable key is always down.\n * @param {westures-core.Gesture.StateKey[]} [options.disableKeys] - List of\n * keys whicyh will disable the gesture. The gesture will not be recognized if\n * one of these keys is pressed. If not specified or an empty list, the gesture\n * is treated as though the disable key is never down.\n * @param {number} [options.minInputs] - The minimum number of pointers that\n * must be active for the gesture to be recognized. Uses >=.\n * @param {number} [options.maxInputs] - The maximum number of pointers that\n * may be active for the gesture to be recognized. Uses <=.\n */\nclass Gesture {\n  constructor(type, element, handler, options = {}) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Gestures require a string type / name');\n    }\n\n    /**\n     * The name of the gesture. (e.g. 'pan' or 'tap' or 'pinch').\n     *\n     * @type {string}\n     */\n    this.type = type;\n\n    /**\n     * The unique identifier for each gesture. This allows for distinctions\n     * across instances of Gestures that are created on the fly (e.g.\n     * gesture-tap-1, gesture-tap-2).\n     *\n     * @type {string}\n     */\n    this.id = `gesture-${this.type}-${g_id++}`;\n\n    /**\n     * The element to which to associate the gesture.\n     *\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * The function handler to execute when the gesture is recognized on the\n     * associated element.\n     *\n     * @type {Function}\n     */\n    this.handler = handler;\n\n    /**\n     * The options settings.\n     *\n     * @type {object}\n     */\n    this.options = { ...Gesture.DEFAULTS, ...options };\n  }\n\n  /**\n   * Determines whether this gesture is enabled.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {boolean} true if enabled, false otherwise.\n   */\n  isEnabled(state) {\n    const count = state.active.length;\n    const event = state.event;\n    const { enableKeys, disableKeys, minInputs, maxInputs } = this.options;\n\n    return (minInputs <= count) && (maxInputs >= count) &&\n      (enableKeys.length === 0 || enableKeys.some(k => event[k])) &&\n      !disableKeys.some(k => event[k]);\n  }\n\n  /**\n   * Event hook for the start phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  start() {\n    return null;\n  }\n\n  /**\n   * Event hook for the move phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  move() {\n    return null;\n  }\n\n  /**\n   * Event hook for the end phase of a gesture.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  end() {\n    return null;\n  }\n\n  /**\n   * Event hook for when an input is cancelled.\n   *\n   * @param {State} state - The input state object of the current region.\n   *\n   * @return {?Object} Gesture is considered recognized if an Object is\n   *    returned.\n   */\n  cancel() {\n    return null;\n  }\n\n  /**\n   * Evalutes the given gesture hook, and dispatches any data that is produced.\n   *\n   * @private\n   *\n   * @param {string} hook - Must be one of 'start', 'move', 'end', or 'cancel'.\n   * @param {State} state - The current State instance.\n   */\n  evaluateHook(hook, state) {\n    const data = this[hook](state);\n    if (data) {\n      this.handler({\n        centroid: state.centroid,\n        event:    state.event,\n        phase:    hook,\n        radius:   state.radius,\n        type:     this.type,\n        target:   this.element,\n        ...data,\n      });\n    }\n  }\n}\n\nGesture.DEFAULTS = Object.freeze({\n  enableKeys:  [],\n  disableKeys: [],\n  minInputs:   1,\n  maxInputs:   Number.MAX_VALUE,\n});\n\nmodule.exports = Gesture;\n\n","/*\n * Contains the {@link Point2D} class.\n */\n\n'use strict';\n\n/**\n * The Point2D class stores and operates on 2-dimensional points, represented as\n * x and y coordinates.\n *\n * @memberof westures-core\n *\n * @param {number} [ x=0 ] - The x coordinate of the point.\n * @param {number} [ y=0 ] - The y coordinate of the point.\n */\nclass Point2D {\n  constructor(x = 0, y = 0) {\n    /**\n     * The x coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.x = x;\n\n    /**\n     * The y coordinate of the point.\n     *\n     * @type {number}\n     */\n    this.y = y;\n  }\n\n  /**\n   * Calculates the angle between this point and the given point.\n   *\n   * @param {!westures-core.Point2D} point - Projected point for calculating the\n   * angle.\n   *\n   * @return {number} Radians along the unit circle where the projected\n   * point lies.\n   */\n  angleTo(point) {\n    return Math.atan2(point.y - this.y, point.x - this.x);\n  }\n\n  /**\n   * Determine the average distance from this point to the provided array of\n   * points.\n   *\n   * @param {!westures-core.Point2D[]} points - the Point2D objects to calculate\n   *    the average distance to.\n   *\n   * @return {number} The average distance from this point to the provided\n   *    points.\n   */\n  averageDistanceTo(points) {\n    return this.totalDistanceTo(points) / points.length;\n  }\n\n  /**\n   * Clone this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, identical to this point.\n   */\n  clone() {\n    return new Point2D(this.x, this.y);\n  }\n\n  /**\n   * Calculates the distance between two points.\n   *\n   * @param {!westures-core.Point2D} point - Point to which the distance is\n   * calculated.\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(point) {\n    return Math.hypot(point.x - this.x, point.y - this.y);\n  }\n\n  /**\n   * Subtract the given point from this point.\n   *\n   * @param {!westures-core.Point2D} point - Point to subtract from this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the result of (this\n   * - point).\n   */\n  minus(point) {\n    return new Point2D(\n      this.x - point.x,\n      this.y - point.y\n    );\n  }\n\n  /**\n   * Return the summation of this point to the given point.\n   *\n   * @param {!westures-core.Point2D} point - Point to add to this point.\n   *\n   * @return {westures-core.Point2D} A new Point2D, which is the addition of the\n   * two points.\n   */\n  plus(point) {\n    return new Point2D(\n      this.x + point.x,\n      this.y + point.y,\n    );\n  }\n\n  /**\n   * Calculates the total distance from this point to an array of points.\n   *\n   * @param {!westures-core.Point2D[]} points - The array of Point2D objects to\n   *    calculate the total distance to.\n   *\n   * @return {number} The total distance from this point to the provided points.\n   */\n  totalDistanceTo(points) {\n    return points.reduce((d, p) => d + this.distanceTo(p), 0);\n  }\n\n  /**\n   * Calculates the centroid of a list of points.\n   *\n   * @param {westures-core.Point2D[]} points - The array of Point2D objects for\n   * which to calculate the centroid.\n   *\n   * @return {westures-core.Point2D} The centroid of the provided points.\n   */\n  static centroid(points = []) {\n    if (points.length === 0) return null;\n\n    const total = Point2D.sum(points);\n    return new Point2D(\n      total.x / points.length,\n      total.y / points.length,\n    );\n  }\n\n  /**\n   * Calculates the sum of the given points.\n   *\n   * @param {westures-core.Point2D[]} points - The Point2D objects to sum up.\n   *\n   * @return {westures-core.Point2D} A new Point2D representing the sum of the\n   * given points.\n   */\n  static sum(points = []) {\n    return points.reduce((total, pt) => total.plus(pt), new Point2D(0, 0));\n  }\n}\n\nmodule.exports = Point2D;\n\n","/*\n * Contains event list definitions, PHASE mapping, and other constants.\n */\n\n'use strict';\n\n/**\n * List of events that trigger the cancel phase.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst CANCEL_EVENTS = Object.freeze([\n  'blur',\n  'pointercancel',\n  'touchcancel',\n]);\n\n/**\n * List of keyboard events that trigger a restart.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst KEYBOARD_EVENTS = Object.freeze([\n  'keydown',\n  'keyup',\n]);\n\n/**\n * List of mouse events to listen to.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst MOUSE_EVENTS = Object.freeze([\n  'mousedown',\n  'mousemove',\n  'mouseup',\n]);\n\n/**\n * List of pointer events to listen to.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst POINTER_EVENTS = Object.freeze([\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n]);\n\n/**\n * List of touch events to listen to.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst TOUCH_EVENTS = Object.freeze([\n  'touchend',\n  'touchmove',\n  'touchstart',\n]);\n\n/**\n * List of potentially state-modifying keys.\n *\n * @private\n * @memberof westures-core\n * @enum\n */\nconst STATE_KEYS = Object.freeze([\n  'altKey',\n  'ctrlKey',\n  'metaKey',\n  'shiftKey',\n]);\n\n/**\n * The cancel phase.\n *\n * @private\n * @memberof westures-core\n * @type { string }\n */\nconst CANCEL = 'cancel';\n\n/**\n * The end phase.\n *\n * @private\n * @memberof westures-core\n * @type { string }\n */\nconst END    = 'end';\n\n/**\n * The move phase.\n *\n * @private\n * @memberof westures-core\n * @type { string }\n */\nconst MOVE   = 'move';\n\n/**\n * The start phase.\n *\n * @private\n * @memberof westures-core\n * @type { string }\n */\nconst START  = 'start';\n\n/**\n * Normalizes window events to be either of type start, move, end, or cancel.\n *\n * @private\n * @memberof westures-core\n * @enum {string}\n */\nconst PHASE = Object.freeze({\n  pointercancel: CANCEL,\n  touchcancel:   CANCEL,\n\n  mouseup:       END,\n  pointerup:     END,\n  touchend:      END,\n\n  mousemove:   MOVE,\n  pointermove: MOVE,\n  touchmove:   MOVE,\n\n  mousedown:   START,\n  pointerdown: START,\n  touchstart:  START,\n});\n\nmodule.exports = {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n\n  CANCEL,\n  END,\n  MOVE,\n  START,\n\n  PHASE,\n};\n\n","/*\n * Contains the {@link PointerData} class\n */\n\n'use strict';\n\nconst Point2D   = require('./Point2D.js');\nconst { PHASE } = require('./constants.js');\n\n/**\n * @private\n * @inner\n * @memberof PointerData\n *\n * @return {Event} The Event object which corresponds to the given identifier.\n *    Contains pageX, pageY values (or whichever X/Y source was selected).\n */\nfunction getEventObject(event, identifier) {\n  if (event.changedTouches) {\n    return Array.from(event.changedTouches).find(touch => {\n      return touch.identifier === identifier;\n    });\n  }\n  return event;\n}\n\n/**\n * Low-level storage of pointer data based on incoming data from an interaction\n * event.\n *\n * @param {Event} event - The event object being wrapped.\n * @param {number} identifier - The index of touch if applicable\n * @param {string} [source='page'] - One of 'page', 'client', or 'screen'.\n * Determines what the source of (x,y) coordinates will be from the input\n * events. ('X' and 'Y' will be appended, then those are the properties that\n * will be looked up).\n */\nclass PointerData {\n  constructor(event, identifier, source = 'page') {\n    /**\n     * The original event object.\n     *\n     * @type {Event}\n     */\n    this.originalEvent = event;\n\n    /**\n     * The type or 'phase' of this batch of pointer data. 'start' or 'move' or\n     * 'end' or 'cancel'\n     *\n     * @type {string}\n     */\n    this.type = PHASE[event.type];\n\n    /**\n     * The timestamp of the event in milliseconds elapsed since January 1, 1970,\n     * 00:00:00 UTC.\n     *\n     * @type {number}\n     */\n    this.time = Date.now();\n\n    const eventObj = getEventObject(event, identifier);\n    /**\n     * The (x,y) coordinate of the event, wrapped in a Point2D.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.point = new Point2D(eventObj[`${source}X`], eventObj[`${source}Y`]);\n    // this.point = new Point2D(eventObj.clientX, eventObj.clientY);\n  }\n\n  /**\n   * Calculates the angle between this event and the given event.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} Radians measurement between this event and the given\n   *    event's points.\n   */\n  angleTo(pdata) {\n    return this.point.angleTo(pdata.point);\n  }\n\n  /**\n   * Calculates the distance between two PointerDatas.\n   *\n   * @param {PointerData} pdata\n   *\n   * @return {number} The distance between the two points, a.k.a. the\n   *    hypoteneuse.\n   */\n  distanceTo(pdata) {\n    return this.point.distanceTo(pdata.point);\n  }\n}\n\nmodule.exports = PointerData;\n\n","/*\n * Contains the {@link Input} class\n */\n\n'use strict';\n\nconst PointerData = require('./PointerData.js');\n\n/**\n * In case event.composedPath() is not available.\n *\n * @private\n * @inner\n * @memberof Input\n *\n * @param {Event} event\n *\n * @return {Element[]} The elements along the composed path of the event.\n */\nfunction getPropagationPath(event) {\n  if (typeof event.composedPath === 'function') {\n    return event.composedPath();\n  }\n\n  const path = [];\n  for (let node = event.target; node !== document; node = node.parentNode) {\n    path.push(node);\n  }\n  path.push(document);\n  path.push(window);\n\n  return path;\n}\n\n/**\n * A WeakSet is used so that references will be garbage collected when the\n * element they point to is removed from the page.\n *\n * @private\n * @inner\n * @memberof Input\n * @return {WeakSet.<Element>} The Elements in the path of the given event.\n */\nfunction getElementsInPath(event) {\n  return new WeakSet(getPropagationPath(event));\n}\n\n/**\n * Tracks a single input and contains information about the current, previous,\n * and initial events. Contains the progress of each Input and its associated\n * gestures.\n *\n * @param {(PointerEvent | MouseEvent | TouchEvent)} event - The input event\n * which will initialize this Input object.\n * @param {number} identifier - The identifier for this input, so that it can\n * be located in subsequent Event objects.\n * @param {string} [source='page'] - One of 'page', 'client', or 'screen'.\n * Determines what the source of (x,y) coordinates will be from the input\n * events. ('X' and 'Y' will be appended, then those are the properties that\n * will be looked up).\n */\nclass Input {\n  constructor(event, identifier, source) {\n    const currentData = new PointerData(event, identifier, source);\n\n    /**\n     * Which X/Y attributes of input events to look up for determining input\n     * location.\n     *\n     * @private\n     * @type {string}\n     */\n    this.source = source;\n\n    /**\n     * The set of elements along the original event's propagation path at the\n     * time it was dispatched.\n     *\n     * @private\n     * @type {WeakSet.<Element>}\n     */\n    this.initialElements = getElementsInPath(event);\n\n    /**\n     * Holds the initial data from the mousedown / touchstart / pointerdown that\n     * began this input.\n     *\n     * @type {PointerData}\n     */\n    this.initial = currentData;\n\n    /**\n     * Holds the most current pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.current = currentData;\n\n    /**\n     * Holds the previous pointer data for this Input.\n     *\n     * @type {PointerData}\n     */\n    this.previous = currentData;\n\n    /**\n     * The identifier for the pointer / touch / mouse button associated with\n     * this input.\n     *\n     * @type {number}\n     */\n    this.identifier = identifier;\n\n    /**\n     * Stores internal state between events for each gesture based off of the\n     * gesture's id.\n     *\n     * @private\n     * @type {Object}\n     */\n    this.progress = {};\n  }\n\n  /**\n   * The phase of the input: 'start' or 'move' or 'end' or 'cancel'\n   *\n   * @type {string}\n   */\n  get phase() { return this.current.type; }\n\n  /**\n   * The timestamp of the initiating event for this input.\n   *\n   * @type {number}\n   */\n  get startTime() { return this.initial.time; }\n\n  /**\n   * @private\n   *\n   * @param {string} id - The ID of the gesture whose progress is sought.\n   *\n   * @return {Object} The progress of the gesture.\n   */\n  getProgressOfGesture(id) {\n    if (!this.progress[id]) {\n      this.progress[id] = {};\n    }\n    return this.progress[id];\n  }\n\n  /**\n   * @return {number} The distance between the initiating event for this input\n   *    and its current event.\n   */\n  totalDistance() {\n    return this.initial.distanceTo(this.current);\n  }\n\n  /**\n   * Saves the given raw event in PointerData form as the current data for this\n   * input, pushing the old current data into the previous slot, and tossing\n   * out the old previous data.\n   *\n   * @private\n   *\n   * @param {Event} event - The event object to wrap with a PointerData.\n   */\n  update(event) {\n    this.previous = this.current;\n    this.current = new PointerData(event, this.identifier, this.source);\n  }\n\n  /**\n   * Determines if this PointerData was inside the given element at the time it\n   * was dispatched.\n   *\n   * @private\n   *\n   * @param {Element} element\n   *\n   * @return {boolean} true if the Input began inside the element, false\n   *    otherwise.\n   */\n  wasInitiallyInside(element) {\n    return this.initialElements.has(element);\n  }\n}\n\nmodule.exports = Input;\n\n","/*\n * Contains the {@link State} class\n */\n\n'use strict';\n\nconst {\n  CANCEL,\n  END,\n  MOVE,\n  PHASE,\n  START,\n} = require('./constants.js');\nconst Input     = require('./Input.js');\nconst Point2D   = require('./Point2D.js');\n\nconst symbols = Object.freeze({\n  inputs: Symbol.for('inputs'),\n});\n\n/**\n * Set of helper functions for updating inputs based on type of input.\n * Must be called with a bound 'this', via bind(), or call(), or apply().\n *\n * @private\n * @inner\n * @memberof State\n */\nconst update_fns = {\n  TouchEvent: function TouchEvent(event) {\n    Array.from(event.changedTouches).forEach(touch => {\n      this.updateInput(event, touch.identifier);\n    });\n  },\n\n  PointerEvent: function PointerEvent(event) {\n    this.updateInput(event, event.pointerId);\n  },\n\n  MouseEvent: function MouseEvent(event) {\n    if (event.button === 0) {\n      this.updateInput(event, event.button);\n    }\n  },\n};\n\n/**\n * Keeps track of currently active and ending input points on the interactive\n * surface.\n *\n * @param {Element} element - The element underpinning the associated Region.\n * @param {string} [source='page'] - One of 'page', 'client', or 'screen'.\n * Determines what the source of (x,y) coordinates will be from the input\n * events. ('X' and 'Y' will be appended, then those are the properties that\n * will be looked up).\n */\nclass State {\n  constructor(element, source) {\n    /**\n     * Keep a reference to the element for the associated region.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Which X/Y attributes of input events to look up for determining input\n     * location.\n     *\n     * @private\n     * @type {string}\n     */\n    this.source = source;\n\n    /**\n     * Keeps track of the current Input objects.\n     *\n     * @private\n     * @alias [@@inputs]\n     * @type {Map.<Input>}\n     * @memberof State\n     */\n    this[symbols.inputs] = new Map();\n\n    /**\n     * All currently valid inputs, including those that have ended.\n     *\n     * @type {Input[]}\n     */\n    this.inputs = [];\n\n    /**\n     * The array of currently active inputs, sourced from the current Input\n     * objects. \"Active\" is defined as not being in the 'end' phase.\n     *\n     * @type {Input[]}\n     */\n    this.active = [];\n\n    /**\n     * The array of latest point data for the currently active inputs, sourced\n     * from this.active.\n     *\n     * @type {westures-core.Point2D[]}\n     */\n    this.activePoints = [];\n\n    /**\n     * The centroid of the currently active points.\n     *\n     * @type {westures-core.Point2D}\n     */\n    this.centroid = {};\n\n    /**\n     * The latest event that the state processed.\n     *\n     * @type {Event}\n     */\n    this.event = null;\n  }\n\n  /**\n   * Deletes all inputs that are in the 'end' phase.\n   *\n   * @private\n   */\n  clearEndedInputs() {\n    this[symbols.inputs].forEach((v, k) => {\n      if (v.phase === 'end') this[symbols.inputs].delete(k);\n    });\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {Input[]} Inputs in the given phase.\n   */\n  getInputsInPhase(phase) {\n    return this.inputs.filter(i => i.phase === phase);\n  }\n\n  /**\n   * @param {string} phase - One of 'start', 'move', 'end', or 'cancel'.\n   *\n   * @return {Input[]} Inputs <b>not</b> in the given phase.\n   */\n  getInputsNotInPhase(phase) {\n    return this.inputs.filter(i => i.phase !== phase);\n  }\n\n  /**\n   * @private\n   * @return {boolean} True if there are no active inputs. False otherwise.\n   */\n  hasNoActiveInputs() {\n    return this[symbols.inputs].size === 0;\n  }\n\n  /**\n   * Update the input with the given identifier using the given event.\n   *\n   * @private\n   *\n   * @param {Event} event - The event being captured.\n   * @param {number} identifier - The identifier of the input to update.\n   */\n  updateInput(event, identifier) {\n    switch (PHASE[event.type]) {\n    case START:\n      this[symbols.inputs].set(\n        identifier,\n        new Input(event, identifier, this.source)\n      );\n      try {\n        this.element.setPointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      break;\n    case END:\n      try {\n        this.element.releasePointerCapture(identifier);\n      } catch (e) {\n        // NOP: Optional operation failed.\n      }\n      // All of 'end', 'move', and 'cancel' perform updates, hence the\n      // following fall-throughs\n    case CANCEL:\n    case MOVE:\n      if (this[symbols.inputs].has(identifier)) {\n        this[symbols.inputs].get(identifier).update(event);\n      }\n      break;\n    default:\n      console.warn(`Unrecognized event type: ${event.type}`);\n    }\n  }\n\n  /**\n   * Updates the inputs with new information based upon a new event being fired.\n   *\n   * @private\n   * @param {Event} event - The event being captured.\n   */\n  updateAllInputs(event) {\n    update_fns[event.constructor.name].call(this, event);\n    this.updateFields(event);\n  }\n\n  /**\n   * Updates the convenience fields.\n   *\n   * @private\n   * @param {Event} event - Event with which to update the convenience fields.\n   */\n  updateFields(event = null) {\n    this.inputs = Array.from(this[symbols.inputs].values());\n    this.active = this.getInputsNotInPhase('end');\n    this.activePoints = this.active.map(i => i.current.point);\n    this.centroid = Point2D.centroid(this.activePoints);\n    // XXX: Delete this.radius for next released. It is not generally useful.\n    this.radius = this.activePoints.reduce((acc, cur) => {\n      const dist = cur.distanceTo(this.centroid);\n      return dist > acc ? dist : acc;\n    }, 0);\n    if (event) this.event = event;\n  }\n}\n\nmodule.exports = State;\n\n","/*\n * Contains the Region class\n */\n\n'use strict';\n\nconst State     = require('./State.js');\nconst {\n  CANCEL_EVENTS,\n  KEYBOARD_EVENTS,\n  MOUSE_EVENTS,\n  POINTER_EVENTS,\n  TOUCH_EVENTS,\n\n  STATE_KEYS,\n\n  PHASE,\n\n  START,\n  END,\n} = require('./constants.js');\n\n/**\n * Performs an array minus operation.\n *\n * @private\n * @param {Array} left\n * @param {Array} right\n *\n * @return {Array} Array consisting of elements in 'left' that are not in\n * 'right'.\n */\nfunction arrayMinus(left, right) {\n  return left.filter(p => right.indexOf(p) < 0);\n}\n\n/**\n * Determines whether the state of any of the STATE_KEYS has changed since the\n * last call.\n *\n * @private\n * @param {Event} event - The event with STATE_KEYS properties to analyze.\n */\nconst stateKeysWereChanged = (function stateKeyFunctionFactory() {\n  function stateKeysArray(event) {\n    return STATE_KEYS.map(k => event[k]);\n  }\n\n  let currentKeys = stateKeysArray({});\n\n  function stateKeysWereChanged(event) {\n    const newKeys = stateKeysArray(event);\n    const diff = newKeys.map((k, i) => k != currentKeys[i]);\n    currentKeys = newKeys;\n    return diff.some(k => k);\n  }\n\n  return stateKeysWereChanged;\n}());\n\n/**\n * Allows the user to specify the control region which will listen for user\n * input events.\n *\n * @memberof westures-core\n *\n * @param {Element} element - The element which should listen to input events.\n * @param {object} [options]\n * @param {boolean} [options.capture=false] - Whether the region uses the\n * capture phase of input events. If false, uses the bubbling phase.\n * @param {boolean} [options.preventDefault=true] - Whether the default\n * browser functionality should be disabled. This option should most likely be\n * ignored. Here there by dragons if set to false.\n * @param {string} [options.source='page'] - One of 'page', 'client', or\n * 'screen'. Determines what the source of (x,y) coordinates will be from the\n * input events. ('X' and 'Y' will be appended, then those are the properties\n * that will be looked up).\n */\nclass Region {\n  constructor(element, options = {}) {\n    const settings = { ...Region.DEFAULTS, ...options };\n\n    /**\n     * The list of relations between elements, their gestures, and the handlers.\n     *\n     * @private\n     * @type {Gesture[]}\n     */\n    this.gestures = [];\n\n    /**\n     * The list of active gestures for the current input session.\n     *\n     * @private\n     * @type {Gesture[]}\n     */\n    this.activeGestures = [];\n\n    /**\n     * The base list of potentially active gestures for the current input\n     * session.\n     *\n     * @private\n     * @type {Gesture[]}\n     */\n    this.potentialGestures = [];\n\n    /**\n     * The element being bound to.\n     *\n     * @private\n     * @type {Element}\n     */\n    this.element = element;\n\n    /**\n     * Whether the region listens for captures or bubbles.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.capture = settings.capture;\n\n    /**\n     * Whether the default browser functionality should be disabled. This option\n     * should most likely be ignored. Here there by dragons if set to false.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.preventDefault = settings.preventDefault;\n\n    /**\n     * Which X/Y attribute of input events should be used for determining input\n     * locations.\n     *\n     * @private\n     * @type {string}\n     */\n    this.source = settings.source;\n\n    /**\n     * The internal state object for a Region.  Keeps track of inputs.\n     *\n     * @private\n     * @type {State}\n     */\n    this.state = new State(this.element, this.source);\n\n    // Begin operating immediately.\n    this.activate();\n  }\n\n  /**\n   * Activates the region by adding event listeners for all appropriate input\n   * events to the region's element.\n   *\n   * @private\n   */\n  activate() {\n    /*\n     * Having to listen to both mouse and touch events is annoying, but\n     * necessary due to conflicting standards and browser implementations.\n     * Pointer is a fallback for now instead of the primary, until I figure out\n     * all the details to do with pointer-events and touch-action and their\n     * cross browser compatibility.\n     *\n     * Listening to both mouse and touch comes with the difficulty that\n     * preventDefault() must be called to prevent both events from iterating\n     * through the system. However I have left it as an option to the end user,\n     * which defaults to calling preventDefault(), in case there's a use-case I\n     * haven't considered or am not aware of.\n     *\n     * It is also a good idea to keep regions small in large pages.\n     *\n     * See:\n     *  https://www.html5rocks.com/en/mobile/touchandmouse/\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n     *  https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n     */\n    let eventNames = [];\n    if (window.TouchEvent || window.MouseEvent) {\n      eventNames = MOUSE_EVENTS.concat(TOUCH_EVENTS);\n    } else {\n      eventNames = POINTER_EVENTS;\n    }\n\n    // Bind detected browser events to the region element.\n    const arbitrate = this.arbitrate.bind(this);\n    eventNames.forEach(eventName => {\n      this.element.addEventListener(eventName, arbitrate, {\n        capture: this.capture,\n        once:    false,\n        passive: false,\n      });\n    });\n\n    const cancel = this.cancel.bind(this);\n    CANCEL_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, cancel);\n    });\n\n    KEYBOARD_EVENTS.forEach(eventName => {\n      window.addEventListener(eventName, () => {\n        this.setActiveGestures();\n        this.activeGestures.forEach(gesture => {\n          gesture.evaluateHook(START, this.state);\n        });\n      });\n    });\n  }\n\n  /**\n   * Handles a cancel event. Resets the state and the active / potential gesture\n   * lists.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  cancel(event) {\n    event.preventDefault();\n    this.state = new State(this.element);\n    this.resetActiveGestures();\n  }\n\n  /**\n   * Handles a keyboard event, triggering a restart of any gestures that need\n   * it.\n   *\n   * @private\n   * @param {KeyboardEvent} event - The keyboard event.\n   */\n  handleKeyboardEvent(event) {\n    if (stateKeysWereChanged(event)) {\n      this.state.event = event;\n      const oldActiveGestures = this.activeGestures.slice();\n      this.setActiveGestures();\n\n      arrayMinus(oldActiveGestures, this.activeGestures).forEach(gesture => {\n        gesture.evaluateHook(END, this.state);\n      });\n      arrayMinus(this.activeGestures, oldActiveGestures).forEach(gesture => {\n        gesture.evaluateHook(START, this.state);\n      });\n    }\n  }\n\n  /**\n   * Resets the active gestures.\n   *\n   * @private\n   */\n  resetActiveGestures() {\n    this.potentialGestures = [];\n    this.activeGestures = [];\n  }\n\n  /**\n   * Selects active gestures from the list of potentially active gestures.\n   *\n   * @private\n   */\n  setActiveGestures() {\n    this.activeGestures = this.potentialGestures.filter(gesture => {\n      return gesture.isEnabled(this.state);\n    });\n  }\n\n  /**\n   * Selects the gestures that are active for the current input sequence.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  updateActiveGestures(event) {\n    if (PHASE[event.type] === START) {\n      if (this.state.inputs.length > 0) {\n        const input = this.state.inputs[0];\n        this.potentialGestures = this.gestures.filter(gesture => {\n          return input.wasInitiallyInside(gesture.element);\n        });\n      }\n      this.setActiveGestures();\n    }\n  }\n\n  /**\n   * Evaluates whether the current input session has completed.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  pruneActiveGestures(event) {\n    if (PHASE[event.type] === END) {\n      if (this.state.hasNoActiveInputs()) {\n        this.resetActiveGestures();\n      } else {\n        this.setActiveGestures();\n      }\n    }\n  }\n\n  /**\n   * All input events flow through this function. It makes sure that the input\n   * state is maintained, determines which gestures to analyze based on the\n   * initial position of the inputs, calls the relevant gesture hooks, and\n   * dispatches gesture data.\n   *\n   * @private\n   * @param {Event} event - The event emitted from the window object.\n   */\n  arbitrate(event) {\n    this.state.updateAllInputs(event);\n    this.updateActiveGestures(event);\n\n    if (this.activeGestures.length > 0) {\n      if (this.preventDefault) event.preventDefault();\n\n      this.activeGestures.forEach(gesture => {\n        gesture.evaluateHook(PHASE[event.type], this.state);\n      });\n    }\n\n    this.state.clearEndedInputs();\n    this.pruneActiveGestures();\n  }\n\n  /**\n   * Bind an element to a gesture with an associated handler.\n   *\n   * @param {westures-core.Gesture} gesture - Instantiated gesture to add.\n   */\n  addGesture(gesture) {\n    this.gestures.push(gesture);\n  }\n\n  /**\n   * Retrieves Gestures by their associated element.\n   *\n   * @private\n   *\n   * @param {Element} element - The element for which to find gestures.\n   *\n   * @return {Gesture[]} Gestures to which the element is bound.\n   */\n  getGesturesByElement(element) {\n    return this.gestures.filter(b => b.element === element);\n  }\n\n  /**\n   * Unbinds an element from either the specified gesture or all if no gesture\n   * is specified.\n   *\n   * @param {Element} element - The element to unbind.\n   * @param {westures-core.Gesture} [ gesture ] - The gesture to unbind. If\n   * undefined, will unbind all Gestures associated with the given element.\n   */\n  removeGestures(element, gesture) {\n    this.getGesturesByElement(element).forEach(b => {\n      if (gesture == null || b.gesture === gesture) {\n        this.gestures.splice(this.gestures.indexOf(b), 1);\n      }\n    });\n  }\n}\n\nRegion.DEFAULTS = Object.freeze({\n  capture:        false,\n  preventDefault: true,\n  source:         'page',\n});\n\nmodule.exports = Region;\n\n","/*\n * Contains the abstract Pinch class.\n */\n\n'use strict';\n\nconst cascade = Symbol('cascade');\nconst smooth = Symbol('smooth');\n\n/**\n * Determines whether to apply smoothing. Smoothing is on by default but turned\n * off if either:<br>\n *  1. The user explicitly requests that it be turned off.<br>\n *  2. The active pointer is not \"coarse\".<br>\n *\n * @see {@link\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia}\n *\n * @inner\n * @memberof westures-core.Smoothable\n *\n * @param {boolean} isRequested - Whether smoothing was requested by the user.\n *\n * @returns {boolean} Whether to apply smoothing.\n */\nfunction smoothingIsApplicable(isRequested) {\n  if (isRequested) {\n    try {\n      return window.matchMedia('(pointer: coarse)').matches;\n    } catch (e) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A Smoothable datatype is one that is capable of smoothing out a series of\n * values as they come in, one at a time, providing a more consistent series. It\n * does this by creating some inertia in the values using a cascading average.\n * (For those who are interested in such things, this effectively means that it\n * provides a practical application of Zeno's Dichotomy).\n *\n * @example\n * const x = new Smoothable({ identity: 1 });\n * const a = x.next(1);   // 1.0\n * const b = x.next(1.2); // 1.1\n * const c = x.next(0.9); // 1.0\n * const d = x.next(0.6); // 0.8\n * const e = x.next(1.2); // 1.0\n * const f = x.next(1.6); // 1.3\n * x.restart();\n * const g = x.next(0);   // 0.5\n *\n * @memberof westures-core\n *\n * @param {Object} [options]\n * @param {boolean} [options.applySmoothing=true] Whether to apply smoothing to\n * the data.\n * @param {*} [options.identity=0] The identity value of this smoothable data.\n */\nclass Smoothable {\n  constructor(options = {}) {\n    const final_options = { ...Smoothable.DEFAULTS, ...options };\n\n    /**\n     * The function through which smoothed emits are passed.\n     *\n     * @method\n     * @param {*} data - The data to emit.\n     *\n     * @return {*} The smoothed out data.\n     */\n    this.next = null;\n    if (smoothingIsApplicable(final_options.applySmoothing)) {\n      this.next = this[smooth].bind(this);\n    } else {\n      this.next = data => data;\n    }\n\n    /**\n     * The \"identity\" value of the data that will be smoothed.\n     *\n     * @type {*}\n     * @default 0\n     */\n    this.identity = final_options.identity;\n\n    /**\n     * The cascading average of outgoing values.\n     *\n     * @memberof westures-core.Smoothable\n     * @alias [@@cascade]\n     * @type {object}\n     */\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Restart the Smoothable gesture.\n   */\n  restart() {\n    this[cascade] = this.identity;\n  }\n\n  /**\n   * Smooth out the outgoing data.\n   *\n   * @memberof westures-core.Smoothable\n   * @alias [@@smooth]\n   * @param {object} data - The next batch of data to emit.\n   *\n   * @return {?object}\n   */\n  [smooth](data) {\n    const average = this.average(this[cascade], data);\n    this[cascade] = average;\n    return average;\n  }\n\n  /**\n   * Average out two values, as part of the smoothing algorithm. Override this\n   * method if the data being smoothed is not a Number.\n   *\n   * @param {number} a\n   * @param {number} b\n   *\n   * @return {number} The average of 'a' and 'b'\n   */\n  average(a, b) {\n    return (a + b) / 2;\n  }\n}\n\nSmoothable.DEFAULTS = Object.freeze({\n  applySmoothing: true,\n  identity:       0,\n});\n\nmodule.exports = Smoothable;\n\n","/**\n * The global API interface for Westures. Exposes a constructor for the Region\n * and the generic Gesture class for user gestures to implement, as well as the\n * Point2D class, which may be useful.\n *\n * @namespace westures-core\n */\n\n'use strict';\n\nconst Gesture = require('./src/Gesture.js');\nconst Point2D = require('./src/Point2D.js');\nconst Region = require('./src/Region.js');\nconst Smoothable = require('./src/Smoothable.js');\n\nmodule.exports = {\n  Gesture,\n  Point2D,\n  Region,\n  Smoothable,\n};\n\n"]}